with_shadow(
geom_node_text(
aes(
label = ifelse(name %in% providers, name, "")
),
family = inter_pkg_prop$medium
),
colour = "white",
sigma = unit(1, 'mm')
) +
geom_node_text(
aes(
label = ifelse(name %in% providers, name, "")
),
family = inter_pkg_prop$medium
) +
coord_equal() +
labs(
x = NULL, y = NULL,
title = "RUA Dependencies"
) +
theme_inter(grid="") +
theme(
axis.text.y.left = elb(),
axis.text.x.bottom = elb()
)
install.packages("rgexf")
library(rgexf)
igraph.to.gexf(g, "~/Desktop/dmarc.gexf")
?igraph.to.gexf
igraph.to.gexf(g)
plot(
igraph.to.gexf(g)
)
as.character(igraph.to.gexf(g))
substr(as.character(igraph.to.gexf(g)), 1, 100)
gx <- igraph.to.gexf(g)
?write.gexf
write.gexf(g, "~/Desktop/a.gexf")
og <- capture.output(print(gx))
substr(og, 1, 100)
og <- capture.output(print(gx), split = FALSE)
substr(og, 1, 100)
og <- capture.output(print(gx))
write_lines(og, "~/Desktop/a.gexf")
library(r2d3)
?r2d3
d3g <- as_d3_data(g)
str(d3g)
?as_d3_data
str(d3g, 1)
install.packages("d3r")
library(d3r)
substr(d3g, 1, 100)
d3g <- d3_igraph(g)
d3g
class(d3g)
str(d3g, 1)
wrlte_lines(d3g, "~/Desktop/d3g.json")
writeLines(d3g, "~/Desktop/d3g.json")
has_valid_dmarc %>%
count(apex, sort=TRUE) %>%
head(17)
urlools::apex_domain()
urltools::apex_domain()
urltools::tld_extract("a.example.com")
urltools::suffix_extract("a.example.com")
urltools::suffix_extract("a.example.com")[, c("domain", "suffix")]
urltools::suffix_extract("a.example.com")[, c("domain", "suffix"), drop=TRUE]
as.character(urltools::suffix_extract("a.example.com")[, c("domain", "suffix"), drop=TRUE])
paste0(as.character(urltools::suffix_extract("a.example.com")[, c("domain", "suffix"), drop=TRUE]), collapse = ".")
setwd("~/Development/gha-test/")
fils <- list.files("data/2021-05/2021-05-15/", full.names = TRUE)
fils
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
library(urltools, include.only = "suffix_extract")
library(stringi)
library(jsonlite, include.only = "fromJSON")
library(tidyverse)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
igraph::graph_from_data_frame
library(igraph, include.only = c("graph_from_data_frame"))
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(tidyverse)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
?d3_igraph
??d3_igraph
wri
library(igraph, include.only = "graph_from_data_frame")
library(urltools, include.only = "suffix_extract")
library(igraph, include.only = "graph_from_data_frame")
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(d3r, include.only = "d3_igraph")
library(tidyverse)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
V(g)$in_degree <- degree(g, mode = "in")
library(igraph, include.only = c("graph_from_data_frame", "degree"))
V(g)$in_degree <- degree(g, mode = "in")
?degree
library(igraph, include.only = c("graph_from_data_frame", "degree"))
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(d3r, include.only = "d3_igraph")
library(tidyverse)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
V(g)$in_degree <- degree(g, mode = "in")
library(igraph, include.only = c("graph_from_data_frame", "degree", "V"))
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(d3r, include.only = "d3_igraph")
library(tidyverse)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
V(g)$in_degree <- degree(g, mode = "in")
library(igraph, include.only = c("graph_from_data_frame", "degree", "V", "V<-"))
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(d3r, include.only = "d3_igraph")
library(tidyverse)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
fils <- list.files("data/2021-05/2021-05-15", full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
V(g)$in_degree <- degree(g, mode = "in")
V(g)$color <- ifelse(V(g)$in_degree > 1, "goldenrod", "maroon")
writeLines(d3_igraph(g), "docs/processors.json")
readLines("latest")
?install.packages
?remotes::system_requirements
library(igraph, include.only = c("graph_from_data_frame", "degree", "V", "V<-"))
library(urltools, include.only = "suffix_extract")
library(stringi, include.only = "stri_match_first_regex")
library(jsonlite, include.only = "fromJSON")
library(d3r, include.only = "d3_igraph")
library(tibble)
library(purrr)
library(tidyr)
library(dplyr)
apex_domain <- function(fqdn) {
.x <- suffix_extract(fqdn)[, c("domain", "suffix")]
sprintf("%s.%s", .x$domain, .x$suffix)
}
latest_run <- readLines("latest", warn = FALSE)
output_file <- "docs/processors.json"
fils <- list.files(latest_run, full.names = TRUE)
fils %>%
map(fromJSON) %>%
map_df(~{
tibble(
domain = .x$domain,
valid = .x$dmarc$valid,
p = .x$dmarc$tags$p$value %||% NA_character_,
rua = list(.x$dmarc$tags$rua$value),
ruf = list(.x$dmarc$tags$ruf$value)
)
}) -> dmarc
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "character")
) %>%
unnest("rua") %>%
mutate(
scheme = "mailto",
address = sub("^mailto:", "", rua),
size_limit = NA
) %>%
select(-rua) %>%
bind_rows(
dmarc %>%
filter(!is.na(p)) %>%
filter(lengths(rua) > 0) %>%
select(-ruf) %>%
filter(
map_lgl(rua, inherits, "data.frame")
) %>%
unnest(rua)
) %>%
select(-size_limit, -valid) %>%
separate_rows(address, sep = ",") %>%
mutate(
address = sub("^mailto:", "", address),
to = stri_match_first_regex(address, "^([^@]+)@")[,2],
apex = apex_domain(stri_match_first_regex(address, "^[^@]+@(.*)$")[,2])
) -> has_valid_dmarc
has_valid_dmarc %>%
distinct(domain, p, apex) -> gdf
gdf %>%
select(from = domain, to = apex) %>%
graph_from_data_frame() -> g
V(g)$in_degree <- degree(g, mode = "in")
V(g)$color <- ifelse(V(g)$in_degree > 1, "goldenrod", "maroon")
writeLines(d3_igraph(g), output_file)
?install.packages
?.lib.loc
?.libPaths
